@startuml
'https://plantuml.com/class-diagram

package reproduction {
    class ReproductionScheme {
        + Population reproducePopulation( const Population& population, const std::vector<float>& fitness )
        # virtual Population doReproducePopulation( const Population& population, std::vector<float> fitness ) = 0
    }

    class ReproductionSchemeFactory {
        + {static} UReproductionScheme create( ReproductionParams params, std::mt19937 rng )
    }

    class ProportionalReproductionScheme {
        + ProportionalReproductionScheme( std::mt19937 random_engine )
        # Population doReproducePopulation( const Population& population, std::vector<float> fitness ) override
        - std::mt19937 random_engine_
    }

    class RandomReproductionScheme {
        + RandomReproductionScheme( std::mt19937 random_engine )
        # Population doReproducePopulation( const Population& population, std::vector<float> fitness ) override
        - std::mt19937 random_engine_
    }

    class TournamentReproductionScheme {
        + TournamentReproductionScheme( std::mt19937 random_engine, int tournament_size )
        # Population doReproducePopulation( const Population& population, std::vector<float> fitness ) override
        - std::mt19937 random_engine_
        - int tournament_size_
    }

    ReproductionScheme <|-- RandomReproductionScheme
    ReproductionScheme <|-- ProportionalReproductionScheme
    ReproductionScheme <|-- TournamentReproductionScheme
    ReproductionSchemeFactory <.. ReproductionScheme
}

@enduml