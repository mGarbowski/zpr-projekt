@startuml
'https://plantuml.com/class-diagram

package evolution {
    class Evolution {
        + Evolution( UReproductionScheme reproduction_scheme, UMutationScheme mutation_scheme,
                       USuccessionScheme succession_scheme )
        + Population evolve( const Population& population, const std::vector<float>& fitness )

        - UReproductionScheme reproduction_scheme_
        - UMutationScheme mutation_scheme_
        - USuccessionScheme succession_scheme_
    }

    class Specimen {
        + {static} Population createRandomPopulation( int population_size, std::mt19937 random_generator )
        + Specimen( const CarDescription& car_description )
        + bool operator==( const Specimen& rhs ) const
        + std::vector<float> attributes() const
        + CarDescription carDescription() const
        + std::vector<float>& attributesRef()
        + void clampAttributes()
        - std::vector<float> attributes_
    }

    class MutationScheme {
        + void mutatePopulation( std::vector<Specimen>& population )
        + void mutateSpecimen( Specimen& specimen )
        # virtual void doMutateSpecimen( Specimen& specimen ) = 0
    }

    class MutationSchemeFactory {
        + {static} UMutationScheme create( MutationParams params, std::mt19937 rng )
    }

    class MutationScheme {
        + void mutatePopulation( std::vector<Specimen>& population )
        + void mutateSpecimen( Specimen& specimen )
        # virtual void doMutateSpecimen( Specimen& specimen ) = 0
    }

    class NoMutationScheme {
        # virtual void doMutateSpecimen( Specimen& specimen )
    }

    class GaussianMutationScheme {
        + GaussianMutationScheme( const double mutation_strength, const std::mt19937& random_number_generator )
        # void doMutateSpecimen( Specimen& specimen ) override
        - std::mt19937 random_number_generator_
        - std::normal_distribution<> normal_distribution_
    }

    class ReproductionScheme {
        + Population reproducePopulation( const Population& population, const std::vector<float>& fitness )
        # virtual Population doReproducePopulation( const Population& population, std::vector<float> fitness ) = 0
    }

    class ReproductionSchemeFactory {
        + {static} UReproductionScheme create( ReproductionParams params, std::mt19937 rng )
    }

    class ProportionalReproductionScheme {
        + ProportionalReproductionScheme( std::mt19937 random_engine )
        # Population doReproducePopulation( const Population& population, std::vector<float> fitness ) override
        - std::mt19937 random_engine_
    }

    class RandomReproductionScheme {
        + RandomReproductionScheme( std::mt19937 random_engine )
        # Population doReproducePopulation( const Population& population, std::vector<float> fitness ) override
        - std::mt19937 random_engine_
    }

    class TournamentReproductionScheme {
        + TournamentReproductionScheme( std::mt19937 random_engine, int tournament_size )
        # Population doReproducePopulation( const Population& population, std::vector<float> fitness ) override
        - std::mt19937 random_engine_
        - int tournament_size_
    }

    class SuccessionScheme {
        + Population nextGeneration( const Population& previous_population, const Population& mutants, const std::vector<float>& fitness )
        # virtual Population doNextGeneration( const Population& previous_population, const Population& mutants, const std::vector<float>& fitness ) const = 0
    }

    class SuccessionSchemeFactory {
        + {static} USuccessionScheme create( SuccessionParams params )
    }

    class GenerationSuccessionScheme {
        # Population doNextGeneration( const Population& previous_population, const Population& mutants, const std::vector<float>& fitness ) const override
    }

    class ElitistSuccessionScheme {
        + ElitistSuccessionScheme( int elite_size )
        # Population doNextGeneration( const Population& previous_population, const Population& mutants, const std::vector<float>& fitness ) const override
        - int elite_size_
    }


    MutationScheme <|-- NoMutationScheme
    MutationScheme <|-- GaussianMutationScheme
    MutationSchemeFactory <.. MutationScheme

    ReproductionScheme <|-- RandomReproductionScheme
    ReproductionScheme <|-- ProportionalReproductionScheme
    ReproductionScheme <|-- TournamentReproductionScheme
    ReproductionSchemeFactory <.. ReproductionScheme

    SuccessionScheme <|-- GenerationSuccessionScheme
    SuccessionScheme <|-- ElitistSuccessionScheme
    SuccessionSchemeFactory <.. SuccessionScheme

    Evolution <.. MutationScheme
    Evolution <.. ReproductionScheme
    Evolution <.. SuccessionScheme


}
@enduml